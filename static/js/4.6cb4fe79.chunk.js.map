{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModelHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","style","color","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","Input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Label","label"],"mappings":"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","file":"static/js/4.6cb4fe79.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__y2J-Y\"};","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\n\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        }, \r\n        isSignup: true,\r\n    } \r\n    componentDidMount() {\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/'){\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n   \r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = updateObject(this.state.controls, {\r\n            [controlName] : updateObject(this.state.controls[controlName],{\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            })\r\n        });\r\n        this.setState({controls: updatedControls});\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\r\n    }\r\n\r\n    switchAuthModelHandler = () => {\r\n        this.setState(prevState => {\r\n            return {isSignup: !prevState.isSignup};\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input key ={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n        ));\r\n\r\n        if(this.props.loading){\r\n            form = <Spinner />\r\n        }\r\n        \r\n        let errorMessage = null;\r\n        if(this.props.error) { \r\n            errorMessage = (\r\n                <div><p style={{color: \"Red\"}}>{this.props.error.message}</p></div>\r\n                \r\n            );\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if(this.props.isAuthenticated){\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button \r\n                    clicked={this.switchAuthModelHandler}\r\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? \"SIGN IN\" : \"SIGN UP\"}</Button>\r\n\r\n            </div> \r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\r\nimport classes from './Input.module.css';\r\nconst Input = (props) =>{\r\n    let inputElement = null; \r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch (props.elementType){\r\n        case ('input'): \r\n            inputElement= <input \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed}/>; \r\n            break;\r\n        case ('textarea'): \r\n            inputElement= <textarea \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed}/>; \r\n            break;\r\n        case ('select'): \r\n            inputElement= <select \r\n                className={inputClasses.join(' ')} \r\n                value={props.value} \r\n                onChange={props.changed}>\r\n                {props.elementConfig.options.map(option =>(\r\n                    <option key={option.value} value={option.value}>\r\n                        {option.displayValue}\r\n                    </option>    \r\n                ))}\r\n\r\n                </select>; \r\n            break;\r\n        default: \r\n            inputElement = <input \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed}/>; \r\n            break;\r\n    }\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2zkld\",\"Label\":\"Input_Label__BbXuy\",\"InputElement\":\"Input_InputElement__W6ZLZ\",\"Invalid\":\"Input_Invalid__3noqZ\"};"],"sourceRoot":""}